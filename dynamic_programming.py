# 动态规划三要素:最优子结构,边界和状态转移函数
# 最优子结构是指每个阶段的最优状态可以从之前某个阶段的某个或某些状态直接得到(子问题的最优解能够决定这个问题的最优解)
# 边界指的是问题最小子集的解(初始范围)
# 状态转移函数是指从一个阶段向另一个阶段过度的具体形式,描述的是两个相邻子问题之间的关系(递推式)
#
# 判断是否可以利用动态规划求解,第一个是判断是否存在重叠子问题
#
# 重叠子问题,对每个子问题只计算一次,然后将其计算的结果保存到一个表格中
# 每一次需要上一个子问题解时,进行调用,只要o(1)时间复杂度,准确的说,动态规划是利用空间去换取时间的算法.


# 计算有重叠
def climb_stair(n):
    if n <= 2:
        return n
    tem = climb_stair(n-1) + climb_stair(n-2)
    return tem


# 计算结果保存到列表
def climb_stair2(n):
    if n <= 2:
        return n
    res = [1, 2]
    while len(res) < n:
        res.append(res[-1] + res[-2])
    return res[-1]

